/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sfdccdc.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ChangeEventHeader extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7439216031951449446L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ChangeEventHeader\",\"namespace\":\"com.sfdccdc.avro\",\"fields\":[{\"name\":\"entityName\",\"type\":\"string\"},{\"name\":\"recordIds\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"changeType\",\"type\":\"string\"},{\"name\":\"changedFields\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"changeOrigin\",\"type\":\"string\"},{\"name\":\"transactionKey\",\"type\":\"string\"},{\"name\":\"sequenceNumber\",\"type\":\"int\"},{\"name\":\"commitTimestamp\",\"type\":\"long\"},{\"name\":\"commitUser\",\"type\":\"string\"},{\"name\":\"commitNumber\",\"type\":\"long\"}],\"avro.java.generateBuilder\":true}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ChangeEventHeader> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ChangeEventHeader> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ChangeEventHeader> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ChangeEventHeader> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ChangeEventHeader> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ChangeEventHeader to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ChangeEventHeader from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ChangeEventHeader instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ChangeEventHeader fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence entityName;
  private java.util.List<java.lang.CharSequence> recordIds;
  private java.lang.CharSequence changeType;
  private java.util.List<java.lang.CharSequence> changedFields;
  private java.lang.CharSequence changeOrigin;
  private java.lang.CharSequence transactionKey;
  private int sequenceNumber;
  private long commitTimestamp;
  private java.lang.CharSequence commitUser;
  private long commitNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ChangeEventHeader() {}

  /**
   * All-args constructor.
   * @param entityName The new value for entityName
   * @param recordIds The new value for recordIds
   * @param changeType The new value for changeType
   * @param changedFields The new value for changedFields
   * @param changeOrigin The new value for changeOrigin
   * @param transactionKey The new value for transactionKey
   * @param sequenceNumber The new value for sequenceNumber
   * @param commitTimestamp The new value for commitTimestamp
   * @param commitUser The new value for commitUser
   * @param commitNumber The new value for commitNumber
   */
  public ChangeEventHeader(java.lang.CharSequence entityName, java.util.List<java.lang.CharSequence> recordIds, java.lang.CharSequence changeType, java.util.List<java.lang.CharSequence> changedFields, java.lang.CharSequence changeOrigin, java.lang.CharSequence transactionKey, java.lang.Integer sequenceNumber, java.lang.Long commitTimestamp, java.lang.CharSequence commitUser, java.lang.Long commitNumber) {
    this.entityName = entityName;
    this.recordIds = recordIds;
    this.changeType = changeType;
    this.changedFields = changedFields;
    this.changeOrigin = changeOrigin;
    this.transactionKey = transactionKey;
    this.sequenceNumber = sequenceNumber;
    this.commitTimestamp = commitTimestamp;
    this.commitUser = commitUser;
    this.commitNumber = commitNumber;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return entityName;
    case 1: return recordIds;
    case 2: return changeType;
    case 3: return changedFields;
    case 4: return changeOrigin;
    case 5: return transactionKey;
    case 6: return sequenceNumber;
    case 7: return commitTimestamp;
    case 8: return commitUser;
    case 9: return commitNumber;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: entityName = (java.lang.CharSequence)value$; break;
    case 1: recordIds = (java.util.List<java.lang.CharSequence>)value$; break;
    case 2: changeType = (java.lang.CharSequence)value$; break;
    case 3: changedFields = (java.util.List<java.lang.CharSequence>)value$; break;
    case 4: changeOrigin = (java.lang.CharSequence)value$; break;
    case 5: transactionKey = (java.lang.CharSequence)value$; break;
    case 6: sequenceNumber = (java.lang.Integer)value$; break;
    case 7: commitTimestamp = (java.lang.Long)value$; break;
    case 8: commitUser = (java.lang.CharSequence)value$; break;
    case 9: commitNumber = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'entityName' field.
   * @return The value of the 'entityName' field.
   */
  public java.lang.CharSequence getEntityName() {
    return entityName;
  }


  /**
   * Sets the value of the 'entityName' field.
   * @param value the value to set.
   */
  public void setEntityName(java.lang.CharSequence value) {
    this.entityName = value;
  }

  /**
   * Gets the value of the 'recordIds' field.
   * @return The value of the 'recordIds' field.
   */
  public java.util.List<java.lang.CharSequence> getRecordIds() {
    return recordIds;
  }


  /**
   * Sets the value of the 'recordIds' field.
   * @param value the value to set.
   */
  public void setRecordIds(java.util.List<java.lang.CharSequence> value) {
    this.recordIds = value;
  }

  /**
   * Gets the value of the 'changeType' field.
   * @return The value of the 'changeType' field.
   */
  public java.lang.CharSequence getChangeType() {
    return changeType;
  }


  /**
   * Sets the value of the 'changeType' field.
   * @param value the value to set.
   */
  public void setChangeType(java.lang.CharSequence value) {
    this.changeType = value;
  }

  /**
   * Gets the value of the 'changedFields' field.
   * @return The value of the 'changedFields' field.
   */
  public java.util.List<java.lang.CharSequence> getChangedFields() {
    return changedFields;
  }


  /**
   * Sets the value of the 'changedFields' field.
   * @param value the value to set.
   */
  public void setChangedFields(java.util.List<java.lang.CharSequence> value) {
    this.changedFields = value;
  }

  /**
   * Gets the value of the 'changeOrigin' field.
   * @return The value of the 'changeOrigin' field.
   */
  public java.lang.CharSequence getChangeOrigin() {
    return changeOrigin;
  }


  /**
   * Sets the value of the 'changeOrigin' field.
   * @param value the value to set.
   */
  public void setChangeOrigin(java.lang.CharSequence value) {
    this.changeOrigin = value;
  }

  /**
   * Gets the value of the 'transactionKey' field.
   * @return The value of the 'transactionKey' field.
   */
  public java.lang.CharSequence getTransactionKey() {
    return transactionKey;
  }


  /**
   * Sets the value of the 'transactionKey' field.
   * @param value the value to set.
   */
  public void setTransactionKey(java.lang.CharSequence value) {
    this.transactionKey = value;
  }

  /**
   * Gets the value of the 'sequenceNumber' field.
   * @return The value of the 'sequenceNumber' field.
   */
  public int getSequenceNumber() {
    return sequenceNumber;
  }


  /**
   * Sets the value of the 'sequenceNumber' field.
   * @param value the value to set.
   */
  public void setSequenceNumber(int value) {
    this.sequenceNumber = value;
  }

  /**
   * Gets the value of the 'commitTimestamp' field.
   * @return The value of the 'commitTimestamp' field.
   */
  public long getCommitTimestamp() {
    return commitTimestamp;
  }


  /**
   * Sets the value of the 'commitTimestamp' field.
   * @param value the value to set.
   */
  public void setCommitTimestamp(long value) {
    this.commitTimestamp = value;
  }

  /**
   * Gets the value of the 'commitUser' field.
   * @return The value of the 'commitUser' field.
   */
  public java.lang.CharSequence getCommitUser() {
    return commitUser;
  }


  /**
   * Sets the value of the 'commitUser' field.
   * @param value the value to set.
   */
  public void setCommitUser(java.lang.CharSequence value) {
    this.commitUser = value;
  }

  /**
   * Gets the value of the 'commitNumber' field.
   * @return The value of the 'commitNumber' field.
   */
  public long getCommitNumber() {
    return commitNumber;
  }


  /**
   * Sets the value of the 'commitNumber' field.
   * @param value the value to set.
   */
  public void setCommitNumber(long value) {
    this.commitNumber = value;
  }

  /**
   * Creates a new ChangeEventHeader RecordBuilder.
   * @return A new ChangeEventHeader RecordBuilder
   */
  public static com.sfdccdc.avro.ChangeEventHeader.Builder newBuilder() {
    return new com.sfdccdc.avro.ChangeEventHeader.Builder();
  }

  /**
   * Creates a new ChangeEventHeader RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ChangeEventHeader RecordBuilder
   */
  public static com.sfdccdc.avro.ChangeEventHeader.Builder newBuilder(com.sfdccdc.avro.ChangeEventHeader.Builder other) {
    if (other == null) {
      return new com.sfdccdc.avro.ChangeEventHeader.Builder();
    } else {
      return new com.sfdccdc.avro.ChangeEventHeader.Builder(other);
    }
  }

  /**
   * Creates a new ChangeEventHeader RecordBuilder by copying an existing ChangeEventHeader instance.
   * @param other The existing instance to copy.
   * @return A new ChangeEventHeader RecordBuilder
   */
  public static com.sfdccdc.avro.ChangeEventHeader.Builder newBuilder(com.sfdccdc.avro.ChangeEventHeader other) {
    if (other == null) {
      return new com.sfdccdc.avro.ChangeEventHeader.Builder();
    } else {
      return new com.sfdccdc.avro.ChangeEventHeader.Builder(other);
    }
  }

  /**
   * RecordBuilder for ChangeEventHeader instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ChangeEventHeader>
    implements org.apache.avro.data.RecordBuilder<ChangeEventHeader> {

    private java.lang.CharSequence entityName;
    private java.util.List<java.lang.CharSequence> recordIds;
    private java.lang.CharSequence changeType;
    private java.util.List<java.lang.CharSequence> changedFields;
    private java.lang.CharSequence changeOrigin;
    private java.lang.CharSequence transactionKey;
    private int sequenceNumber;
    private long commitTimestamp;
    private java.lang.CharSequence commitUser;
    private long commitNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sfdccdc.avro.ChangeEventHeader.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.entityName)) {
        this.entityName = data().deepCopy(fields()[0].schema(), other.entityName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.recordIds)) {
        this.recordIds = data().deepCopy(fields()[1].schema(), other.recordIds);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.changeType)) {
        this.changeType = data().deepCopy(fields()[2].schema(), other.changeType);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.changedFields)) {
        this.changedFields = data().deepCopy(fields()[3].schema(), other.changedFields);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.changeOrigin)) {
        this.changeOrigin = data().deepCopy(fields()[4].schema(), other.changeOrigin);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.transactionKey)) {
        this.transactionKey = data().deepCopy(fields()[5].schema(), other.transactionKey);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.sequenceNumber)) {
        this.sequenceNumber = data().deepCopy(fields()[6].schema(), other.sequenceNumber);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.commitTimestamp)) {
        this.commitTimestamp = data().deepCopy(fields()[7].schema(), other.commitTimestamp);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.commitUser)) {
        this.commitUser = data().deepCopy(fields()[8].schema(), other.commitUser);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.commitNumber)) {
        this.commitNumber = data().deepCopy(fields()[9].schema(), other.commitNumber);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing ChangeEventHeader instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sfdccdc.avro.ChangeEventHeader other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.entityName)) {
        this.entityName = data().deepCopy(fields()[0].schema(), other.entityName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.recordIds)) {
        this.recordIds = data().deepCopy(fields()[1].schema(), other.recordIds);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.changeType)) {
        this.changeType = data().deepCopy(fields()[2].schema(), other.changeType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.changedFields)) {
        this.changedFields = data().deepCopy(fields()[3].schema(), other.changedFields);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.changeOrigin)) {
        this.changeOrigin = data().deepCopy(fields()[4].schema(), other.changeOrigin);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.transactionKey)) {
        this.transactionKey = data().deepCopy(fields()[5].schema(), other.transactionKey);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sequenceNumber)) {
        this.sequenceNumber = data().deepCopy(fields()[6].schema(), other.sequenceNumber);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.commitTimestamp)) {
        this.commitTimestamp = data().deepCopy(fields()[7].schema(), other.commitTimestamp);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.commitUser)) {
        this.commitUser = data().deepCopy(fields()[8].schema(), other.commitUser);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.commitNumber)) {
        this.commitNumber = data().deepCopy(fields()[9].schema(), other.commitNumber);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'entityName' field.
      * @return The value.
      */
    public java.lang.CharSequence getEntityName() {
      return entityName;
    }


    /**
      * Sets the value of the 'entityName' field.
      * @param value The value of 'entityName'.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder setEntityName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.entityName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'entityName' field has been set.
      * @return True if the 'entityName' field has been set, false otherwise.
      */
    public boolean hasEntityName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'entityName' field.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder clearEntityName() {
      entityName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordIds' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getRecordIds() {
      return recordIds;
    }


    /**
      * Sets the value of the 'recordIds' field.
      * @param value The value of 'recordIds'.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder setRecordIds(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.recordIds = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'recordIds' field has been set.
      * @return True if the 'recordIds' field has been set, false otherwise.
      */
    public boolean hasRecordIds() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'recordIds' field.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder clearRecordIds() {
      recordIds = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'changeType' field.
      * @return The value.
      */
    public java.lang.CharSequence getChangeType() {
      return changeType;
    }


    /**
      * Sets the value of the 'changeType' field.
      * @param value The value of 'changeType'.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder setChangeType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.changeType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'changeType' field has been set.
      * @return True if the 'changeType' field has been set, false otherwise.
      */
    public boolean hasChangeType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'changeType' field.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder clearChangeType() {
      changeType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'changedFields' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getChangedFields() {
      return changedFields;
    }


    /**
      * Sets the value of the 'changedFields' field.
      * @param value The value of 'changedFields'.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder setChangedFields(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.changedFields = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'changedFields' field has been set.
      * @return True if the 'changedFields' field has been set, false otherwise.
      */
    public boolean hasChangedFields() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'changedFields' field.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder clearChangedFields() {
      changedFields = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'changeOrigin' field.
      * @return The value.
      */
    public java.lang.CharSequence getChangeOrigin() {
      return changeOrigin;
    }


    /**
      * Sets the value of the 'changeOrigin' field.
      * @param value The value of 'changeOrigin'.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder setChangeOrigin(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.changeOrigin = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'changeOrigin' field has been set.
      * @return True if the 'changeOrigin' field has been set, false otherwise.
      */
    public boolean hasChangeOrigin() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'changeOrigin' field.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder clearChangeOrigin() {
      changeOrigin = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionKey' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransactionKey() {
      return transactionKey;
    }


    /**
      * Sets the value of the 'transactionKey' field.
      * @param value The value of 'transactionKey'.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder setTransactionKey(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.transactionKey = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionKey' field has been set.
      * @return True if the 'transactionKey' field has been set, false otherwise.
      */
    public boolean hasTransactionKey() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'transactionKey' field.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder clearTransactionKey() {
      transactionKey = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'sequenceNumber' field.
      * @return The value.
      */
    public int getSequenceNumber() {
      return sequenceNumber;
    }


    /**
      * Sets the value of the 'sequenceNumber' field.
      * @param value The value of 'sequenceNumber'.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder setSequenceNumber(int value) {
      validate(fields()[6], value);
      this.sequenceNumber = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'sequenceNumber' field has been set.
      * @return True if the 'sequenceNumber' field has been set, false otherwise.
      */
    public boolean hasSequenceNumber() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'sequenceNumber' field.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder clearSequenceNumber() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'commitTimestamp' field.
      * @return The value.
      */
    public long getCommitTimestamp() {
      return commitTimestamp;
    }


    /**
      * Sets the value of the 'commitTimestamp' field.
      * @param value The value of 'commitTimestamp'.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder setCommitTimestamp(long value) {
      validate(fields()[7], value);
      this.commitTimestamp = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'commitTimestamp' field has been set.
      * @return True if the 'commitTimestamp' field has been set, false otherwise.
      */
    public boolean hasCommitTimestamp() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'commitTimestamp' field.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder clearCommitTimestamp() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'commitUser' field.
      * @return The value.
      */
    public java.lang.CharSequence getCommitUser() {
      return commitUser;
    }


    /**
      * Sets the value of the 'commitUser' field.
      * @param value The value of 'commitUser'.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder setCommitUser(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.commitUser = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'commitUser' field has been set.
      * @return True if the 'commitUser' field has been set, false otherwise.
      */
    public boolean hasCommitUser() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'commitUser' field.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder clearCommitUser() {
      commitUser = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'commitNumber' field.
      * @return The value.
      */
    public long getCommitNumber() {
      return commitNumber;
    }


    /**
      * Sets the value of the 'commitNumber' field.
      * @param value The value of 'commitNumber'.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder setCommitNumber(long value) {
      validate(fields()[9], value);
      this.commitNumber = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'commitNumber' field has been set.
      * @return True if the 'commitNumber' field has been set, false otherwise.
      */
    public boolean hasCommitNumber() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'commitNumber' field.
      * @return This builder.
      */
    public com.sfdccdc.avro.ChangeEventHeader.Builder clearCommitNumber() {
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ChangeEventHeader build() {
      try {
        ChangeEventHeader record = new ChangeEventHeader();
        record.entityName = fieldSetFlags()[0] ? this.entityName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.recordIds = fieldSetFlags()[1] ? this.recordIds : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        record.changeType = fieldSetFlags()[2] ? this.changeType : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.changedFields = fieldSetFlags()[3] ? this.changedFields : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        record.changeOrigin = fieldSetFlags()[4] ? this.changeOrigin : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.transactionKey = fieldSetFlags()[5] ? this.transactionKey : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.sequenceNumber = fieldSetFlags()[6] ? this.sequenceNumber : (java.lang.Integer) defaultValue(fields()[6]);
        record.commitTimestamp = fieldSetFlags()[7] ? this.commitTimestamp : (java.lang.Long) defaultValue(fields()[7]);
        record.commitUser = fieldSetFlags()[8] ? this.commitUser : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.commitNumber = fieldSetFlags()[9] ? this.commitNumber : (java.lang.Long) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ChangeEventHeader>
    WRITER$ = (org.apache.avro.io.DatumWriter<ChangeEventHeader>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ChangeEventHeader>
    READER$ = (org.apache.avro.io.DatumReader<ChangeEventHeader>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.entityName);

    long size0 = this.recordIds.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.recordIds) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeString(this.changeType);

    long size1 = this.changedFields.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.CharSequence e1: this.changedFields) {
      actualSize1++;
      out.startItem();
      out.writeString(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    out.writeString(this.changeOrigin);

    out.writeString(this.transactionKey);

    out.writeInt(this.sequenceNumber);

    out.writeLong(this.commitTimestamp);

    out.writeString(this.commitUser);

    out.writeLong(this.commitNumber);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.entityName = in.readString(this.entityName instanceof Utf8 ? (Utf8)this.entityName : null);

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.recordIds;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("recordIds").schema());
        this.recordIds = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      this.changeType = in.readString(this.changeType instanceof Utf8 ? (Utf8)this.changeType : null);

      long size1 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a1 = this.changedFields;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("changedFields").schema());
        this.changedFields = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
          a1.add(e1);
        }
      }

      this.changeOrigin = in.readString(this.changeOrigin instanceof Utf8 ? (Utf8)this.changeOrigin : null);

      this.transactionKey = in.readString(this.transactionKey instanceof Utf8 ? (Utf8)this.transactionKey : null);

      this.sequenceNumber = in.readInt();

      this.commitTimestamp = in.readLong();

      this.commitUser = in.readString(this.commitUser instanceof Utf8 ? (Utf8)this.commitUser : null);

      this.commitNumber = in.readLong();

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.entityName = in.readString(this.entityName instanceof Utf8 ? (Utf8)this.entityName : null);
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.recordIds;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("recordIds").schema());
            this.recordIds = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 2:
          this.changeType = in.readString(this.changeType instanceof Utf8 ? (Utf8)this.changeType : null);
          break;

        case 3:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a1 = this.changedFields;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("changedFields").schema());
            this.changedFields = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
              a1.add(e1);
            }
          }
          break;

        case 4:
          this.changeOrigin = in.readString(this.changeOrigin instanceof Utf8 ? (Utf8)this.changeOrigin : null);
          break;

        case 5:
          this.transactionKey = in.readString(this.transactionKey instanceof Utf8 ? (Utf8)this.transactionKey : null);
          break;

        case 6:
          this.sequenceNumber = in.readInt();
          break;

        case 7:
          this.commitTimestamp = in.readLong();
          break;

        case 8:
          this.commitUser = in.readString(this.commitUser instanceof Utf8 ? (Utf8)this.commitUser : null);
          break;

        case 9:
          this.commitNumber = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










