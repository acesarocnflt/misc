apiVersion: batch/v1
kind: Job
metadata:
  name: kafka-acls-job
  namespace: confluent
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: kafka-acls
        image: confluentinc/cp-kafka:7.8.0
        command: ["/bin/bash", "-c"]
        args:
          - |
            cp /scripts/acl-script.py /tmp/acl-script.py &&
            chmod +x /tmp/acl-script.py &&
            /tmp/acl-script.py
        volumeMounts:
        - name: script-volume
          mountPath: /scripts
        - name: config-volume
          mountPath: /config
      volumes:
      - name: script-volume
        configMap:
          name: kafka-acls-script
      - name: config-volume
        configMap:
          name: kafka-acls-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-acls-script
  namespace: confluent
data:
  acl-script.py: |
    #!/usr/bin/env python3
    import yaml
    import subprocess
    import os

    # Get Kafka broker from environment variable or default
    KAFKA_BROKER = os.getenv("KAFKA_BROKER", "kafka.confluent.svc.cluster.local:9092")

    if not KAFKA_BROKER:
        print("Error: KAFKA_BROKER environment variable is not set.")
        exit(1)

    print(f"Using Kafka broker: {KAFKA_BROKER}")

    # Path to the YAML file containing ACL configuration
    CONFIG_FILE = "/config/acl-config.yaml"

    if not os.path.isfile(CONFIG_FILE):
        print(f"Error: Configuration file {CONFIG_FILE} not found.")
        exit(1)

    # Load YAML file
    with open(CONFIG_FILE, "r") as file:
        config = yaml.safe_load(file)

    # Process each ACL entry
    for acl in config.get("kafka-acls", []):
        action = acl.get("action")
        principal = acl.get("allow-principal")
        transactional_id = acl.get("transactional-id")
        resource_pattern_type = acl.get("resource-pattern-type")
        operations = acl.get("operations", [])

        for operation in operations:
            # Check if ACL already exists
            check_cmd = [
                "kafka-acls", "--bootstrap-server", KAFKA_BROKER,
                "--list", "--transactional-id", transactional_id
            ]
            result = subprocess.run(check_cmd, capture_output=True, text=True)

            if operation in result.stdout:
                print(f"ACL for {operation} on {transactional_id} already exists. Skipping.")
            else:
                print(f"Creating ACL for {operation} on {transactional_id}.")
                create_cmd = [
                    "kafka-acls", "--bootstrap-server", KAFKA_BROKER,
                    action, "--allow-principal", principal,
                    "--operation", operation,
                    "--transactional-id", transactional_id,
                    "--resource-pattern-type", resource_pattern_type
                ]
                subprocess.run(create_cmd)
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-acls-config
  namespace: confluent
data:
  acl-config.yaml: |
    kafka-acls:
      - action: "--add"
        allow-principal: "User:team1"
        operations:
          - "WRITE"
          - "DESCRIBE"
        transactional-id: "team1-streams-app1"
        resource-pattern-type: "prefixed"

      - action: "--add"
        allow-principal: "User:team2"
        operations:
          - "READ"
          - "DESCRIBE"
        transactional-id: "team2-streams-app2"
        resource-pattern-type: "literal"
